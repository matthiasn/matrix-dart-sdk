name: "All the sdk specific jobs"

on:
  workflow_call:
    inputs:
      flutter_version:
        description: "The flutter version used for tests and builds"
        type: string
        required: true
      dart_version:
        description: "The dart version used for tests and builds"
        type: string
        required: true

jobs:
  e2ee_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        homeserver: [synapse, dendrite, conduit]
      # since the dendrite job is optional, actually run all tests to the end instead of failing on first error.
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: |
          export NETWORK='--network mynet'
          docker network create mynet
          # deploy homeserver instance
          scripts/integration-server-${{matrix.homeserver}}.sh
          docker run $NETWORK --env GITHUB_ACTIONS="${GITHUB_ACTIONS}" --env HOMESERVER_IMPLEMENTATION="${{matrix.homeserver}}" --env HOMESERVER="${{startsWith('dendrite', matrix.homeserver) && format('{0}:8008', matrix.homeserver) || matrix.homeserver }}" --volume="$(pwd):/workdir" --workdir /workdir ghcr.io/famedly/container-image-flutter/flutter:${{inputs.flutter_version}} /bin/bash -c "set -e
          scripts/integration-prepare-alpine.sh
          # create test user environment variables
          source scripts/integration-create-environment-variables.sh
          # properly set the homeserver IP and create test users
          scripts/integration-prepare-homeserver.sh 
          # setup OLM
          scripts/prepare.sh
          scripts/test_driver.sh"

  # coverage is done on the flutter-linux image because we setup olm there
  # coverage_without_olm is done on dart images because why not :D
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Flutter
        uses: subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa
        with:
          flutter-version: ${{ inputs.flutter_version }}
          cache: true
      - name: Run tests
        run: |
          sed -i 's/#flutter_test/flutter_test/g' pubspec.yaml
          rm -r example
          sudo apt-get update && sudo apt-get install --no-install-recommends --no-install-suggests -y curl libolm3 lcov python3 python3-distutils libsqlite3-dev
          flutter pub get
          ./scripts/test.sh
      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/
          retention-days: 1

  coverage_without_olm:
    runs-on: ubuntu-latest
    container:
      image: dart:${{ inputs.dart_version }}
    env:
      NO_OLM: 1
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: |
          apt-get update && apt-get install --no-install-recommends --no-install-suggests -y curl lcov python3 python3-distutils libsqlite3-dev
          dart pub get
          ./scripts/test.sh coverage-without-olm
      - uses: actions/upload-artifact@v3
        with:
          name: coverage-without-olm
          path: coverage-without-olm/
          retention-days: 1

  review_app_coverage:
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        app: [coverage, coverage-without-olm]
    needs: [coverage, coverage_without_olm]
    secrets: inherit
    uses: famedly/frontend-ci-templates/.github/workflows/review-app.yml@td/artifactName
    with:
      projectname: "dart-sdk-${{ matrix.app }}"
      pr: ${{ github.event.pull_request.number }}
      environment: "review"
      artifact-name: ${{ matrix.app }}

  pub-dev-dry-run:
    runs-on: ubuntu-latest
    container:
      image: dart:${{inputs.dart_version}}
    steps:
      - uses: actions/checkout@v3
      - name: pub.dev publish dry run
        run: |
          dart pub get
          dart pub publish --dry-run
